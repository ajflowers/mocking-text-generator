{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","formText","setFormText","newText","setNewText","firstUpper","setFirstUpper","useEffect","caps","output","i","length","char","charAt","match","toUpperCase","toLowerCase","updateText","str","className","htmlFor","type","name","onChange","event","preventDefault","target","value","handleChange","readOnly","onClick","flipCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOA6EeA,MA1Ef,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGuBJ,oBAAS,GAHhC,mBAGNK,EAHM,KAGMC,EAHN,KAKbC,qBAAU,WAGR,IAFA,IAAIC,EAAOH,EACPI,EAAS,GACLC,EAAI,EAAGA,EAAIT,EAASU,OAAQD,IAAK,CACvC,IAAIE,EAAOX,EAASY,OAAOH,GACvBE,EAAKE,MAAM,WAEXL,GADED,EACQI,EAAKG,cAELH,EAAKI,cAEjBR,GAAQA,GAERC,GAAUG,EAGdK,EAAWR,MAGb,IAAMQ,EAAa,SAACC,GAClBd,EAAWc,IAeb,OACE,qBAAKC,UAAU,MAAf,SACE,uBAAMA,UAAU,aAAhB,UACE,6BAAKd,EAAa,0BAA4B,4BAC9C,uBAAOe,QAAQ,QAAf,wBAEE,uBACEC,KAAK,OACLC,KAAK,QACLC,SAAU,SAAAC,GAAK,OArBJ,SAAAA,GACnBA,EAAMC,iBACNvB,EAAYsB,EAAME,OAAOC,OAmBEC,CAAaJ,MAGpC,uBACA,uBACA,uBAAOJ,QAAQ,SAAf,iBAEE,uBAAOS,UAAQ,EACbR,KAAO,OACPC,KAAO,SACPK,MAASxB,IAGb,uBACA,uBACA,wBAAQ2B,QAAS,SAAAN,GAAK,OA7BX,SAACA,GAChBA,EAAMC,iBACNnB,GAAeD,GA2Be0B,CAASP,IAAnC,SACGnB,EAAc,cAAgB,sBCxD1B2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.a590a685.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [formText, setFormText] = useState('');\n  const [newText, setNewText] = useState('');\n  const [firstUpper, setFirstUpper] = useState(false);\n\n  useEffect(() => {\n    var caps = firstUpper;\n    var output = \"\"\n    for(var i = 0; i < formText.length; i++) {\n      var char = formText.charAt(i);\n      if (char.match(/[a-z]/i)) {\n        if (caps) {\n          output += char.toUpperCase();\n        } else {\n          output += char.toLowerCase();\n        }\n        caps = !caps;\n      } else {\n        output += char;\n      }      \n    }\n    updateText(output);\n  });\n\n  const updateText = (str) => {\n    setNewText(str);\n  }\n\n  const handleChange = event => {\n    event.preventDefault();\n    setFormText(event.target.value);\n    // console.log(event.target.value);\n\n  }\n\n  const flipCase = (event) => {\n    event.preventDefault();\n    setFirstUpper(!firstUpper);\n  }\n\n  return (\n    <div className=\"App\">\n      <form className=\"text-memer\">\n        <h2>{firstUpper ? \"MoCkInG tExT gEnErAtOr:\" : \"mOcKiNg TeXt GeNeRaToR:\"}</h2>\n        <label htmlFor=\"input\">Your text:</label>\n          \n          <input\n            type=\"text\"\n            name=\"input\"\n            onChange={event => handleChange(event)}\n          />\n        \n        <br/>\n        <br/>\n        <label htmlFor=\"output\">Me:</label>\n          \n          <input readOnly\n            type = \"text\"\n            name = \"output\"\n            value = {newText}\n          />\n        \n        <br/>\n        <br/>\n        <button onClick={event => flipCase(event)}>\n          {firstUpper ?  \"InVeRt CaSe\" : \"iNvErT cAsE\"}\n        </button>\n      </form>\n\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}